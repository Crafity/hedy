1:
    intro_text: |
        Здравей, ето те и теб при Хеди! :-)

        В това първо ниво ще се научиш да ползваш специалните команди за програмиране: `print`, `ask` и `echo`.
        В лявата колона <-- можеш да разгледаш примери с тези и други команди.

        Виждаш ли синия бутон под всеки пример? Казва се "Пробвай". Като го натиснеш,
        примерният код на програмата ще се изпише автоматочно в долното ляво черно поле.

        Под черното поле се намира зелен бутон 'Тествай кода'. Натисни го, за да видиш изпълнението на кода.
        В същото поле можеш смело да променяш някои от думите на кода. Обаче не променяй командите засега.

        Добре. Имаш ли вече идея какво да програмираш? Ако още не, то в табовете отгоре ще откриеш някои готови идеи.

    start_code: "print Ето те и теб, очаквах те! :-)"
    commands:
    -   name: "print"
        explanation: "Принтирай дума с командата `print`."
        example: "Пример: print Привет, добре дошли при Хеди!"
        demo_code: "print Привет, добре дошли при Хеди!"
    -   name: "ask"
        explanation: "Задай въпрос с `ask`, примерно любим цвят."
        example: "Пример: ask Кой е любимият ти цвят?"
        demo_code: "ask Кой е любимият ти цвят?"
    -   name: "echo"
        explanation: "Повтори това, което си написал(а) с `echo`."
        example: "Пример: echo значи любимият ти цвят е ... "
        demo_code: |-
            ask Кой е любимият ти цвят?
            echo значи любимият ти цвят e ...
    -   name: "forward"
        explanation: "Нарисувай линия с `forward`."
        example: "Пример: forward 100"
        demo_code: "forward 100"
    -   name: "turn"
        explanation: "Обърни нарисуваната костенурка с `turn`"
        example: "Пример: turn"
        demo_code: |-
            forward 50
            turn right
            forward 25
            turn left
            forward 50
            turn right
            forward 25
            turn left
            forward 50
2:
    intro_text: |
        Във второ ниво ще научим нещо ново заедно. Можеш да назовеш име и да го запишеш с командата `is`.
        След това ще можеш да ползваш името навсякъде в програмата, ето така:

        ```
        име is Хеди
        print Здравей име!
        ```

        **Внимание!** Запитването с командата `ask` се променя в това ниво, така че отговорът се "записва" в име, например:

        ```
        отговорът is ask Как се казваш?
        ```

        Командата `print` работи също както в предишното ниво, а от `echo` повече няма да имаш нужда.

        Във второ ниво ще можеш да съставиш списък с думи и програмата сама ще може да изпечата произволна дума от твоя списък.
        Това се постига с командата `at random` (изговаря се "ет рендъм").

        Всички програмни кодове от ниво 2 са изписани в лявата колона със сините бутони, а с табовете горе се задействат новите задачи.
        Хайде, успех!
    start_code: "print здравей свят!"
    commands:
    -   name: "is"
        explanation: "С командата `is` можеш да запишеш име в програмата. Избери си едно име, може и твоето :-)."
        example: "Например: име is Галя."
        demo_code: |-
            име is Галя
            print Аз се казвам име.
    -   name: "ask"
        explanation: "Запитай с командата `ask`. Важно е да запомниш, че трябва да назовеш отговора си с командата `is`."
        example: "Пример: цвят is ask Кой е любимият ти цвят?"
        demo_code: |-
            цвят is ask Кой е любимият ти цвят?
            print Твоят любим е цвят.
    -   name: "is - turtle"
        explanation: "Назови число, използвайки командата `is`."
        example: "Пример: число is 90."
        demo_code: |-
            hoek is 90
            turn hoek
            forward 100
    -   name: "избери_произволно"
        explanation: "Избери произволна дума от списък с думи като ползваш командите `at` и `random`."
        example: 'Пример: животни is куче, котка, кенгуру.'
        demo_code: |-
            животни is куче, котка, кенгуру
            print животни at random
3:
    start_code: "print 'Ура! Вече си в трето ниво!'"
    intro_text: |
        Ето ни вече в трето ниво! Командите `ask` и `print` сега ще се поизменят малко.
        Новото правило е да пишеш думите, измислени от теб в кавички (примерно "моите думи са оградени в кавички")!

        Това е необходимо, защото сега можеш да накараш компютъра да принтира всякакви думи. Това се отнася и за думите,
        които се "записват" с командата `is`.

        В повечето програмни езици се ползват кавички. Вече се доближаваме до "истинското" програмиране. :-)

        ## Задачите оттук нататък ще стават по-сложни, но какво от това!
        Командите от примерите в лявата колона ще ти помагат. Табовете по-горе съдържат нови задания, които се усложняват в посока все по-надясно.
        Затова ги ползвай един по един, отляво надясно.

    commands:
    -   name: "print"
        explanation: "Принтирай точно думите в кавички"
        example: "Example: print 'Баба жаба живее в блатото.'"
        demo_code: "print 'Баба жаба живее в блатото.'"
    -   name: "is"
        explanation: "назови цял текст с едно име с командата `print` без кавичките."
        example: "Example: name is Иван Димитров Коларов."
        demo_code: |-
            име is Иван Димитров Коларов
            print 'Казвам се ' име '.'
    -   name: "ask"
        explanation: "Запитай с командата `is ask`."
        example: "Пример: цвят is ask 'Кой е любимият ти цвят?'"
        demo_code: |-
            цвят is ask 'кой е любимият ти цвят?'
            print цвят ' е твоят любим цвят!'
4:
    start_code: |-
        name is ask 'what is your name?'
        if name is Hedy print 'cool!' else print 'meh'
    intro_text: |
         Ниво 4! Тук командите `ask` and `print` работят по същия начин.

         Ще научим нова команда, казва се `if`! С `if` ще програмираме правенето на избор между две неща или два предмета.

         ## Примерен код на Хеди
         ```
         име is ask 'Как се казва този език за програмиране?'
         if име is Хеди print 'позна' else print 'не позна'
         ```

         В този код ще принтираш 'позна' ако си написал(а) името Хеди, или 'не позна' ако си въвел(а) друго име.

         ## Съвет
         Кодът, който пишеш с командите `if` ... `else` е доста дълъг (като изречение) и не се побира на един ред.
         <br>Затова можеш да пренасяш кода на нов ред. Значи, на първи ред пишеш `if`, а на нов ред пишеш `else`, виж:
         ```
         име is ask 'Как се казва този език за програмиране?'
         if име is Хеди print 'позна :-)'
         else print 'не позна'
         ```

         ## Заданията
         Разгледай заданията в табовете горе. Задачите надясно се усложняват.
    commands:
    -   name: "print"
        explanation: "Принтирай точно думите в кавички"
        example: "Пример: print 'Това е изречение. Повече изречения образуват текст.'"
        demo_code: "print 'Това е изречение. Повече изречения образуват текст.'"
    -   name: "ask"
        explanation: "Запитай с командата `ask`."
        example: "Пример: възраст is ask 'На колко си години?'"
        demo_code: |-
            възраст is ask 'На колко си години?'
            print 'Ти си на ' възраст ' години!'
    -   name: "if"
        explanation: "Направи избор с командите `if` и `else`."
        example: "Пример: if цвят is бял print 'Красив е!' else print 'става'"
        demo_code: |-
            цвят is ask 'кой е любимият ти цвят?'
            if цвят is бял print 'Красив е!' else print 'става'
    -   name: "if with turtle"
        explanation: "Направи избор с `if`"
        example: "Пример: if отговор is далече forward 100 else forward 5"
        demo_code: |-
            отговор is ask 'Колко метра да вървя напред?'
            if отговор is далече forward 100 else forward 5
5:
    start_code: "print '5 умножено по 5 е ' 5 * 5"
    intro_text: |
         Пето ниво! Командите `ask`, `print` и `if`...`else` засега остават непроменени.
         В това ниво ще научиш нещо ново: ще накараш компютъра да прави калкулации - събиране, изваждане, умножение, деление.

         Събирането се записва с оператора "+" (например `5 + 5`), а изваждането с "-", `5 - 5`.
         Умножението се изписва със звезда: `5 * 5`.

         ## Примерен код на Хеди
         ```
         print '5 плюс 5 е равно на ' 5 + 5
         print '5 минус 5 е равно на ' 5 - 5
         print '5 пъти по 5 е равно на ' 5 * 5
         ```
    commands:
    -   name: "print"
        explanation: "Принтирай точно думите в кавички"
        example: "Пример: print '5 пъти по 5 е равно на ' 5 * 5"
        demo_code: "print '5 пъти по 5 е равно на ' 5 * 5"
    -   name: "ask"
        explanation: "Програмирай задача с калкулация и въвеждане на отговор."
        example: "Пример: решение is ask 'Колко прави 10 + 10?'"
        demo_code: |-
            решение is ask 'Колко прави 10 + 10?'
            if решение is 20 print 'Да!' else print 'Невярно'
    -   name: "`ask` and `if` turtle"
        explanation: "Запитай въвеждане на брой ъгли"
        example: "Пример: ъгли is ask 'Колко ъгли? (част първа)'"
        demo_code: |-
            ъгли is ask 'Колко ъгли?'
            angle is 360 / ъгли
            forward 50
6:
    start_code: "repeat 3 times print 'Да пишеш код на Хеди е забавно!'"
    intro_text: |
        Ниво 6! Командите `ask`, `print` и `if`...`else` засега остават непроменени.
        Новата команда за теб е `repeat`. Repeat на английски значи "повтарям". С нея
        можеш да инструктираш компютъра да изпълни твоя код много пъти.

        ## Примерен код на Хеди
        ```
        repeat 3 times print 'Да пишеш код на Хеди е забавно!'
        ```
    commands:
    -   name: "print"
        explanation: "Принтирай точно думите в кавички"
        example: "Пример: print 'Hello welcome to Hedy.'"
        demo_code: "print 'Hello welcome to Hedy.'"
    -   name: "ask"
        explanation: "Запитай с `ask` за любимия спорт."
        example: "Пример: спорт is ask 'Кой е любимият ти спорт?'"
        demo_code: |-
            спорт is ask 'Кой е любимият ти спорт?'
            print 'Значи обичаш ' спорт '.'
    -   name: "if"
        explanation: "Запитай пак за любимия спорт и използвай `if`, за да дадеш специален резултат ако въведената дума е футбол."
        example: "Пример: спорт is ask 'Кой е любимият ти спорт?'"
        demo_code: |-
            спорт is ask 'Кой е любимият ти спорт?'
            if спорт is футбол repeat 3 times print 'Футбол, футбол и пак футбол!'
            else print 'Значи обичаш ' спорт '.'
    -   name: "repeat - turtle"
        explanation: "Програмирай цикъл с командата `repeat`."
        example: "Пример: repeat 3 times forward 10"
        demo_code: |-
            repeat 3 times forward 20
7:
    start_code: |-
        repeat 5 times
            print 'Здравейте младежи!'
            print 'Това ще се принтира 5 пъти.'
    intro_text: |
        Командите `ask` и `print` вече познаваш добре, но `if` и `repeat` се променят!
        You can now execute groups of code together, but you will have to *indent* the code.
        That means putting four spaces at the beginning of the line. You will also have to indent when you just want to create a block of one line.

        ## Example Hedy code
        ```
        repeat 5 times
            print 'Hello everyone'
            print 'This is all repeated 5 times'
        ```
    commands:
    -   name: "print"
        explanation: "Print something. Remember to use a quotation mark for literal printing."
        example: "Example: print '5 times 5 is ' 5 * 5"
        demo_code: "print '5 times 5 is ' 5 * 5"
    -   name: "ask"
        explanation: "Ask for the answer to a sum and check if it is correct. We can now print 2 lines."
        example: "Example: answer is ask 'What is 5 plus 5?'"
        demo_code: |-
            answer is ask 'What is 5 plus 5?'
            if answer is 10
                print 'Well done!'
                print 'Indeed, the answer was ' answer
            else
                print 'Oops!'
                print 'The answer is 10'
    -   name: "`repeat` with turtle"
        explanation: "Repeat multiple lines"
        example: "Example: draw a square"
        demo_code: |-
            repeat 4 times
                turn 90
                forward 50
8:
    start_code: |-
        for counter in range 1 to 5
            print counter
    intro_text: "`print` works just the same but the `repeat` is now replaced by `for`! You can now write `for counter in range 1 to 5` and use `counter` in your program. Try it out to see what happens! Remember to use indentations after the `for` and `if` statements (That means starting a sentence with four spaces)"
    commands:
    -   name: "for loop"
        explanation: "We replace `repeat` with `for` and add a range"
        example: "for counter in range 1 to 5"
        demo_code: |-
            for counter in range 1 to 5
                print counter
    -   name: "ask"
        explanation: "Ask for the answer to a sum and check if it is correct. We can now print 2 lines."
        example: "Example: answer is ask 'What is 5 plus 5?'"
        demo_code: |-
            answer is ask 'What is 5 plus 5?'
            if answer is 10
                print 'Well done!'
                print 'Indeed, the answer was ' answer
            else
                print 'Oops!'
                print 'The answer is 10'
9:
    start_code: |-
        for i in range 1 to 10:
            print i
        print 'Ready or not, here I come!'
    intro_text: "Now we are going to change a little bit with indentation. Every time that we need an indentation, we need `:` at the line before the indentation."
    commands:
    -   name: "print"
        explanation: "When we use a `for`, we need to put a `:` behind the `for` statement!"
        example: "for i in range 1 to 10:"
        demo_code: |-
            for i in range 1 to 11:
                print i
            print 'Ready or not, here I come!'
    -   name: "if"
        explanation: "We need to do the same with all of our `if` statements"
        example: "if colour is green:'"
        demo_code: |-
            colour is green
            if colour is green:
                print 'The colour is green'
            else:
                print 'The colour is not green'
    -   name: "elif"
        explanation: "We will show you a new command that you are allowed to use: `elif`. `elif` means \"else if\". We start with checking if the `if` is correct, if that one is not true, we check the `elif` and if that one is also not true, we go to the `else`."
        example: "elif a is 5:"
        demo_code: |-
            a is 2
            if a is 1:
                print 'a is 1'
            elif a is 2:
                print 'a is 2'
            else:
                print 'a is not 1 or 2'
10:
    start_code: |-
        for i in range 1 to 3:
            for j in range 1 to 5:
                print 'we are in round: ' i ' and we count: ' j
    intro_text: "From now on, we can repeat a loop more often. In the example we count to 5 and do that 3 times. So we do 3 rounds and count to 5 every time."
    commands:
    -   name: "for"
        explanation: "This is an example with the `for` statement"
        demo_code: |-
            for i in range 1 to 3:
                for j in range 1 to 5:
                    print 'we are in round: ' i ' and we count: ' j
    -   name: "if"
        explanation: "We can do the same with `if` statements"
        demo_code: |-
            colour is blue
            colourtwo is yellow
            if colour is blue:
                if colourtwo is yellow:
                    print 'Together we make green!'
11:
    start_code: |-
        age is input('What is your age?')
        print('So you have been these ages:')
        for i in range(0, age):
            print(i)
    intro_text: "We are going to use round brackets and we are going to change `ask`! We change `ask` into `input`! With `print`, `input` and `for` we will use round brackets now."
    commands:
    -   name: "brackets"
        explanation: "We are going to use brackets with print now!"
        example: "For example: print('Hello World')"
        demo_code: "print('Hello World')"
    -   name: "input"
        explanation: "We remove ask and call it input now. Also we are going to use brackets."
        example: "For example: name is input('What is your name?')"
        demo_code: |-
            name is input('What is your name?')
            print('So your name is ' name)
    -   name: "for"
        explanation: "We are now putting brackets around the numbers in the for loop. for i in range (0, 10):"
        example: "For example: for i in range(0, 10):"
        demo_code: |-
            for i in range(0, 10):
                print(i)
            print('Ready or not, here I come')
12:
    start_code: |-
        fruit is ['apple', 'banana', 'cherry']
        print(fruit)
    intro_text: "We are going to put square brackets around lists! Also we now need to put single quotation marks (') around items in lists. "
    commands:
    -   name: "square brackets"
        explanation: "We are going to put square brackets around lists! We also need to put ' around items in lists."
        example: "For example: fruit is ['apple', 'banana', 'cherry']"
        demo_code: |-
            fruit is ['apple', 'banana', 'cherry']
            print(fruit)
    -   name: "Get an item from a list"
        explanation: "To get an item from a list we use [number] so fruit[1] means, get the first fruit from the list!"
        example: "For example: firstfruit is fruit[1]"
        demo_code: |-
            fruit is ['banana', 'apple', 'cherry']
            firstfruit is fruit[1]
            print(firstfruit)
    -   name: "Get a random item from a list"
        explanation: "To get a random item from a list we use [random] so fruit[random] means, get a random fruit from the list!"
        example: "For example: randomfruit is fruit[random]"
        demo_code: |-
            fruit is ['banana', 'apple', 'cherry']
            randomfruit is fruit[random]
            print(randomfruit)
13:
    start_code: |-
        you_are_still_here is False
        are_you_still_here is input('Are you still here? yes or no?')
        if are_you_still_here is yes:
            you_are_still_here is True
        if you_are_still_here is True:
            print('Hello!')
        if you_are_still_here is False:
            print('Bye!')
    intro_text: "We are now talking about making a variable `True` or `False`, you can put a variable on `True` and on `False`. You can use this to keep track of a certain answer."
    commands:
    -   name: "Example"
        explanation: "In this example, we use `True` and `False` to keep track of the answer of a question. You can answer 5 times. If the answer is correct, good_answer will be `True`."
        example: "good_answer is `False`"
        demo_code: |-
            for i in range(1, 5):
                good_answer is False
                answer is input('What is 5*5')
                if answer is 25:
                    good_answer is True
                else:
                    good_answer is False
                if good_answer is True:
                    print('That is correct!')
                if good_answer is False:
                    print('That is wrong! ' 5-i ' attempts left')
14:
    start_code: |-
        you_are_still_here is False
        are_you_still_here is input('Are you still here? yes or no?')
        if are_you_still_here is yes:
            you_are_still_here is True
        answer is input('What is 5*5?')
        if you_are_still_here is True and answer is 25:
            print('You said yes and gave a good answer')
    intro_text: "We are now going to learn `and` and `or`! If you want to check two statements, you don't have to use two if's but can use `and` and `or`. If you use `and`, both statements, left and right of the `and` need to be true. We can also use `or`. Then only one statement needs to be correct."
    commands:
    -   name: "And"
        explanation: "Both statements (left and right of the `and`) need to be correct."
        example: "if 3+2 is 5 and 2+2 is 4"
        demo_code: |-
            answer1 is input('What is 3+2?')
            answer2 is input('What is 2+2?')
            if answer1 is 5 and answer2 is 4:
                print('Both answers are correct!')
            else:
                print('At least one answer is wrong!')
    -   name: "Or"
        explanation: "`Or` At least 1 of the two statements left and right of the `or`, needs to be correct, if both are correct, it is also fine."
        example: "if 3+2 is 5 or 2+2 is 4"
        demo_code: |-
            answer1 is input('What is 3+2?')
            answer2 is input('What is 2+2?')
            if answer1 is 5 or answer2 is 4:
                print('At least one answer is correct!')
            else:
                print('Both answers are wrong!')
15:
    start_code: |-
        # This is a program that is going to ask a couple of math questions
        for i in range(1, 10):
            # We are going to ask the multiplication table of 5
            answer is input('What is ' i ' times 5?')
            # We check if the answer is the same as our sum
            correct_answer is i * 5
            if answer is correct_answer:
                print(answer ' is correct')
            else:
                print('That is wrong, it is supposed to be: ' i*5)
    intro_text: |-
        When you are making bigger programs, you will need to find a way to remember what every piece of code does. We use comments for this. A comment looks the following:
         ` # This is a comment`. Everything after the # will be invisible for the code.
    commands:
    -   name: "Comment"
        explanation: "We can place comments wherever we want."
        example: "# This is a comment"
        demo_code: |-
            # This program prints Ηello!
            # It has been made in Hedy
            # It does nothing except print Hello!
            print('Ηello!')
16:
    start_code: |-
        age is input('How old are you?')
        if age < 12:
            print('You are younger than me!')
        elif age > 12:
            print('You are older than me!')
    intro_text: "We are going to learn more new items! You might know them already from mathematics, the `<` and `>`. The `<` checks if the first number is smaller than the second, like `4 < 5`. The `>` checks if the first number is bigger than the second, like `6 > 5`."
    commands:
    -   name: "Smaller"
        explanation: "We use the `<` to check if the first number is smaller than the second number. For example if we want to see if a variable is smaller than 15, we use `variable < 15`"
        example: "For example: age < 12"
        demo_code: |-
            age is input('How old are you?')
            if age < 12:
                print('You are younger than me!')
    -   name: "Bigger"
        explanation: "We use the `>` to check if the first number is bigger than the second number. For example if we want to see if a variable is bigger than 15, we use `variable > 15`."
        example: "For example: age > 12"
        demo_code: |-
            age is input('How old are you?')
            if age > 12:
                print('You are older than me!')
17:
    start_code: |-
        correct_answer is False
        # we continue until the correct answer has been given!
        while correct_answer is False:
            answer is input('What is 5 times 5?')
            if answer is 25:
                correct_answer is True
                print('A good answer has been given')
    intro_text: "We are going to learn a new loop, the `while` loop! We continue the loop as long as the statement is true/valid! So at the example code, we continue until a correct answer has been given. If the correct answer is never given, the loop never ends!"
    commands:
    -   name: "Boolean while"
        explanation: "We can use the `while` loop with `True` and `False`"
        example: "Example: while correct_answer is False"
        demo_code: |-
            correct_answer is False
            # we continue until the correct answer has been given!
            while correct_answer is False:
                answer is input('What is 5 times 5?')
                if answer is 25:
                    correct_answer is True
                    print('A good answer has been given')
    -   name: "Smaller while"
        explanation: "We can also use the `while` loop with `<` and `>`. Be careful, you need to change the number so the loop ends. We do that with count is count + 1 now."
        example: "For example: while count < 3"
        demo_code: |-
            count is 1
            # we continue until count is 3!
            while count < 3:
                print('We do this ' 3 - count ' more times')
                count is count + 1
            print('We are done')
18:
    start_code: |-
        list is ['first', 'second', 'third']
        secondvalue is list[2]
        print(secondvalue)
    intro_text: "When we have a list, we can take a specific value from the list. If we want the second item from the list, we type `list[2]`."
    commands:
    -   name: "Count"
        explanation: "We can also sum up all values from a list"
        example: "list[1]"
        demo_code: |-
            list is ['1', '2', '3']
            sum is list[1] + list[2]
            sum is sum + list[3]
            # we expect a 6 here
            print(sum)
19:
    start_code: |-
        fruit is ['apple', 'banana', 'cherry']
        for i in range(1, 3):
            print(fruit[i])
    intro_text: "We can also see everything in a list with the for loop. Because there are three things in the list, we take the loop from 1 to 3. Now we print everything in the loop."
    commands:
    -   name: "Length of list"
        explanation: "With `length` we can see the size of a list. The list in the example is 3 because there are three things in the list"
        example: "length(list)"
        demo_code: |-
            fruit is ['apple', 'banana', 'cherry']
            print('length of list is ' length(fruit))
            for i in range(1, length(fruit)):
                print(fruit[i])
20:
    start_code: |-
        print('What is 5+3?')
        answer = 5+3
        print('answer is now:')
        print(answer)
        if answer == 8:
            print('That is correct!')
        else:
            print('Oh no, that is wrong!')
    intro_text: "Now we are going to change `is` into `=` and `==`. We use `=` if we want to assign a value to a variable. If you want to assign 8 to the variable called answer, we do answer = 8. `==` we use when we want to see if two things are the same."
    commands:
    -   name: "Compare"
        explanation: "If we want to compare, we use ==. 5+3 == 8 checks if 5+3 equals 8"
        example: "For example: 5+3 == 8"
        demo_code: |-
            if 5+3 == 8:
                print('5+3 is indeed 8')
            else:
                print('This will not be printed because 5+3 is 8!')
    -   name: "Assign Value"
        explanation: "If we want to say that a variable called answer is 8, we do answer = 8."
        example: "For example: answer = 8"
        demo_code: |-
            print('What is 5+3?')
            answer = 5+3
            print('answer is now:')
            print(answer)
    -   name: "Compare and assign value"
        explanation: "If we are going to compare two values, we use `==`. If we are going to assign a variable, we use `=`. "
        example: "For example: 5+3 == 8, answer = 8"
        demo_code: |-
            print('What is 5+3?')
            answer = 5+3
            print('answer is now:')
            print(answer)
            if answer == 8:
                print('That is correct!')
            else:
                print('No, that is wrong!')
21:
    start_code: |-
        country = input('Where do you live?')
        if country != Netherlands:
            print('Cool!')
        else:
            print('I am also from the Netherlands!')
    intro_text: "We are going to learn a new item, the `!=` . The ! means not and the = means equal so != means not equal. For example 5 != 4."
    commands:
    -   name: "Not equal"
        explanation: "If we are checking if two things are not equal, we use `!=`"
        example: "For example: 5+3 != 9"
        demo_code: |-
            number = input('You are not allowed to say 5, what is a cool number?')
            if getal != 5:
                print('Good job!')
            else:
                print('You were not allowed to say 5!')
22:
    start_code: |-
        age = input('I am 12 years old, how old are you?')
        if age <= 11:
            print('You are younger than I am!')
        elif age >= 13:
            print('You are older than I am!')
    intro_text: "We are going to combine < and = now. If we want to see if something is smaller or equal than the second number, we use `<=`. We can also check if something is bigger or equal than the second number with `>=`."
    commands:
    -   name: "Smaller equal"
        explanation: "`<=` checks if the number on the left of the `<=` is smaller or equal than the one on the right. So 5 < 5 is not true because 5 is not smaller than 5 but 5 <= 5 is true because 5 is smaller or equal to 5. 6 <= 5 is not true."
        example: "For example: age <= 12"
        demo_code: |-
            age = input('I am 13 years old, how old are you?')
            if age <= 12:
                print('You are younger than I am!')
    -   name: "Larger equal"
        explanation: "`>=` checks if the number on the left of the `>=` is bigger or equal than the one on the right. So 5 > 5 is not true because 5 is not bigger than 5 but 5 >= 5 is true because 5 is bigger or equal to 5. 4 >= 5 is not true."
        example: "For example: age >= 12"
        demo_code: |-
            age = input('I am 11 years old, how old are you?')
            if age >= 12:
                print('You are older than I am!')
